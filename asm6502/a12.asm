;Credit : https://skilldrick.github.io/easy6502/

DEFINE	APPLEL		$00
DEFINE	APPLEH		$01
DEFINE	SNAKEHEADL	$10
DEFINE	SNAKEHEADH	$11
DEFINE	SNAKEBODYSTART	$12
DEFINE	SNAKEDIRECTION	$02
DEFINE	SNAKELENGTH	$03

;DIRECTIONS
DEFINE	MOVINGUP	1
DEFINE	MOVINGRIGHT	2
DEFINE	MOVINGDOWN	4
DEFINE	MOVINGLEFT	8

;ASCII VALUES FOR CONTROLLING SNAKE
DEFINE	ASCII_W		$77
DEFINE	ASCII_A		$61
DEFINE	ASCII_S		$73
DEFINE	ASCII_D		$64

;SYSTEM VARIABLES
DEFINE	SYSRANDOM	$FE
DEFINE	SYSLASTKEY	$FF



	JSR	INIT
	JSR	LOOP


INIT:
	JSR	INITSNAKE
	JSR	GENERATEAPPLEPOSITION
	RTS


INITSNAKE:
	LDA	#MOVINGRIGHT	;START DIRECTION
	STA	SNAKEDIRECTION

	LDA	#4		;START LENGTH (2 SEGS)
	STA	SNAKELENGTH

	LDA	#$11
	STA	SNAKEHEADL
	
	LDA	#$10
	STA	SNAKEBODYSTART

	LDA	#$0F
	STA	$14

	LDA	#$04
	STA	SNAKEHEADH
	STA	$13
	STA	$15
	RTS


GENERATEAPPLEPOSITION:
	;LOAD A NEW RANDOM BYTE INTO $00
	LDA	SYSRANDOM
	STA	APPLEL

	;LOAD A NEW RANDOM NUMBER FROM 2 TO 5
	LDA	SYSRANDOM
	AND	#$03		;MASK OUT LOWEST 2 BITS
	CLC
	ADC	#2
	STA	APPLEH
	RTS


LOOP:
	JSR	READKEYS
	JSR	CHECKCOLLISION
	JSR	UPDATESNAKE
	JSR	DRAWAPPLE
	JSR	DRAWSNAKE
	JSR	SPINWHEELS
	JMP	LOOP


READKEYS:
	LDA	SYSLASTKEY
	CMP	#ASCII_W
	BEQ	UPKEY
	CMP	#ASCII_D
	BEQ	RIGHTKEY
	CMP	#ASCII_S
	BEQ	DOWNKEY
	CMP	#ASCII_A
	BEQ	LEFTKEY
	RTS


UPKEY:
	LDA	#MOVINGDOWN
	BIT	SNAKEDIRECTION
	BNE	ILLEGALMOVE

	LDA	#MOVINGUP
	STA	SNAKEDIRECTION
	RTS


RIGHTKEY:
	LDA	#MOVINGLEFT
	BIT	SNAKEDIRECTION
	BNE	ILLEGALMOVE

	LDA	#MOVINGRIGHT
	STA	SNAKEDIRECTION
	RTS


DOWNKEY:
	LDA	#MOVINGUP
	BIT	SNAKEDIRECTION
	BNE	ILLEGALMOVE

	LDA	#MOVINGDOWN
	STA	SNAKEDIRECTION
	RTS


LEFTKEY:
	LDA	#MOVINGRIGHT
	BIT	SNAKEDIRECTION
	BNE	ILLEGALMOVE

	LDA	#MOVINGLEFT
	STA	SNAKEDIRECTION
	RTS


ILLEGALMOVE:
	RTS


CHECKCOLLISION:
	JSR	CHECKAPPLECOLLISION
	JSR	CHECKSNAKECOLLISION
	RTS


CHECKAPPLECOLLISION:
	LDA	APPLEL
	CMP	SNAKEHEADL
	BNE	DONECHECKINGAPPLECOLLISION
	LDA	APPLEH
	CMP	SNAKEHEADH
	BNE	DONECHECKINGAPPLECOLLISION

	;EAT APPLE
	INC	SNAKELENGTH
	INC	SNAKELENGTH
	JSR	GENERATEAPPLEPOSITION


DONECHECKINGAPPLEPOSITION:
	RTS


CHECKSNAKECOLLISION:
	LDX	#2

SNAKECOLLISIONLOOP:
	LDA	SNAKEHEADL,X
	CMP	SNAKEHEADL
	BNE	CONTINUECOLLISIONLOOP


MAYBECOLLIDED:
	LDA	SNAKEHEADH,X
	CMP	SNAKEHEADH
	BEQ	DIDCOLLIDE


CONTINUECOLLISIONLOOP:
	INX
	INX
	CPX	SNAKELENGTH
	BEQ	DIDNTCOLLIDE
	JMP	SNAKECOLLISIONLOOP


DIDCOLLIDE:
	JMP	GAMEOVER


DIDNTCOLLIDE:
	RTS


UPDATESNAKE:
	LDX	SNAKELENGTH
	DEX
	TXA


UPDATELOOP:
	LDA	SNAKEHEADL,X
	STA	SNAKEBODYSTART,X
	DEX
	BPL	UPDATELOOP
	LDA	SNAKEDIRECTION
	LSR
	BCS	UP
	LSR
	BCS	RIGHT
	LSR
	BCS	DOWN
	LSR
	BCS	LEFT


UP:
	LDA	SNAKEHEADL
	SEC
	SBC	#$20
	STA	SNAKEHEADL
	BCC	UPUP
	RTS


UPUP:
	DEC	SNAKEHEADH
	LDA	#$1
	CMP	SNAKEHEADH
	BEQ	COLLISION
	RTS


RIGHT:
	INC	SNAKEHEADL
	LDA	#$1F
	BIT	SNAKEHEADL
	BEQ	COLLISION
	RTS


DOWN:
	LDA	SNAKEHEADL
	CLC
	ADC	#$20
	STA	SNAKEHEADL
	BCS	DOWNDOWN
	RTS


DOWNDOWN:
	INC	SNAKEHEADH
	LDA	#$6
	CMP	SNAKEHEADH
	BEQ	COLLISION
	RTS


LEFT:
	DEC	SNAKEHEADL
	LDA	SNAKEHEADL
	AND	#$1F
	CMP	#$1F
	BEQ	COLLISION
	RTS


COLLISION:
	JMP	GAMEOVER


DRAWAPPLE:
	LDY	#0
	LDA	SYSRANDOM
	STA	(APPLEL),Y
	RTS


DRAWSNAKE:
	LDX	SNAKELENGTH
	LDA	#0
	STA	(SNAKEHEADL,X)
	
	LDX	#0
	LDA	#1
	STA	(SNAKEHEADL,X)
	RTS


SPINWHEELS:
	LDX	#0


SPINLOOP:
	NOP
	NOP
	DEX
	BNE	SPINLOOP
	RTS


GAMEOVER:
	BRK
